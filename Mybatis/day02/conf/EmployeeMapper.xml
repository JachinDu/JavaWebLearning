<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--namespace：名称空间，指定为接口全类名
    id：唯一标识，接口中对应方法名
    resultType：返回值类型（全限定类名）
    #{id}： 从传递过来的参数中取出id值-->
<mapper namespace="mybatis.dao.EmployeeMapper">
<!--    该select标签相当于对应接口中的函数的实现
         resultType字段可以使用全局配置文件中配置的别名-->
    <select id="getEmpById" resultType="jc">
    select * from tb_employee where id = #{id}
  </select>

<!--        public void addEmp(Employee employee);
            parameterType：可省略，要写就写bean全类名-->

<!--    利用useGeneratedKeys="true"：返回自增的主键值
        keyProperty：将获取的主键值封装给javabean的对应属性-->
<insert id="addEmp" parameterType="mybatis.bean.Employee" useGeneratedKeys="true" keyProperty="id">
    insert into tb_employee(last_name, gender, email) values(#{lastName},#{gender},#{email})
</insert>

<!--        public void updateEmp(Employee employee);-->
    <update id="updateEmp">
        update tb_employee set last_name=#{lastName},email=#{email},gender=#{gender} where id=#{id}
    </update>

<!--        public void deleteEmpByid(Integer id);-->
    <delete id="deleteEmpById">
        delete from tb_employee where id=#{id}
    </delete>

    <select id="getEmpByIdAndName" resultType="jc">
        select * from tb_employee where id=#{id} and last_name=#{last_name}
    </select>

    <select id="getEmpsByName" resultType="jc">
            select * from tb_employee where last_name like #{lastName}
    </select>
</mapper>